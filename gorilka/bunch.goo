package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
//	"internal/dbaser"
//	"internal/memo"
	"io"
	"log"
	"net/http"

	"github.com/jackc/pgx/v5"
)

type gauge = memo.Gauge
type counter = memo.Counter
type MemStorage = memo.MemStorage

// type Metrics struct {
// 	ID    string   `json:"id"`              // имя метрики
// 	MType string   `json:"type"`            // параметр, принимающий значение gauge или counter
// 	Delta *int64   `json:"delta,omitempty"` // значение метрики в случае передачи counter
// 	Value *float64 `json:"value,omitempty"` // значение метрики в случае передачи gauge
// }

func bunchas(rwr http.ResponseWriter, req *http.Request) {
	telo, err := io.ReadAll(req.Body)
	if err != nil {
		rwr.WriteHeader(http.StatusBadRequest)
		return
	}
	buf := bytes.NewBuffer(telo)
	memor := []dbaser.Metrics{}
	err = json.NewDecoder(buf).Decode(&memor)
	if err != nil {
		rwr.WriteHeader(http.StatusBadRequest)
		return
	}
	//----------------------------
	ctx := context.Background()
	db, err := pgx.Connect(ctx, "postgres://postgres:passwordas@localhost:5432/forgo")
	if err != nil {
		log.Printf("%-v", err)
	}
	//-----------------------------------------------
	err = dbaser.TableBuncher(ctx, db, memor)
	if err != nil {
		log.Printf("%-v", err)
	}

	for _, j := range memor {
		fmt.Printf("%+v\n", j)
	}

	reply := struct{ Dlina int }{Dlina: len(memor)}
	json.NewEncoder(rwr).Encode(reply)
}
